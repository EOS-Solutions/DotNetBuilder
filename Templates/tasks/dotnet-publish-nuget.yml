parameters:
- name: feedUri # the URL of the powershellget feed
  type: string
  default: ''
- name: apiKey # the API key to use for publishing
  type: string
  default: ''
- name: authenticateFeeds # if specified, use this credential for the feed (optional)
  type: string
  default: ''
- name: sourceFolder # the URL of the powershellget feed
  type: string
  default: 'output'
- name: name # the URL of the powershellget feed
  type: string
  default: 'NuGet Feed'

steps:

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: ${{ parameters.authenticateFeeds }}

- template: ./install-psmodule-list.yml
  parameters:
    moduleName: DotNetBuilder
    alwaysUpdate: true
    pwsh: true

- task: PowerShell@2
  displayName: 'Push to ${{ parameters.name }}'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $ArtifactRoot = "$(Pipeline.Workspace)"
      $ArtifactRoot = [IO.Path]::Combine($ArtifactRoot, '${{ parameters.sourceFolder }}')
      $NugetPackages = Get-ChildItem $ArtifactRoot -Filter *.nupkg -Recurse
      if (-not $NugetPackages) {
          Write-Host "No NuGet packages found in '$ArtifactRoot', exiting ..."
          return
      }

      Import-Module DotNetBuilder

      $feedUri = "${{ parameters.feedUri }}"
      $apiKey = "${{ parameters.apiKey }}"
      if (-not $apiKey) {
        Write-Host "No API key provided, attempting read from VSS authenticate ..."
        $Credentials = Get-NugetCredentials -Uri $feedUri -Verbose
        $apiKey = $Credentials.GetNetworkCredential().Password
        Write-Host "Got API key length $($apiKey.Length)"
      }

      foreach ($NugetPackage in $NuGetPackages) {
        $nugetPushArgs = @(
            "nuget", "push"
            $NugetPackage.Fullname
            "--source", $feedUri
            "--api-key", $apiKey
        )
        & dotnet @nugetPushArgs
        if ($LASTEXITCODE -ne 0) { throw "Failed" }
      }