parameters:
- name: feedName # the URL of the powershellget feed
  type: string
- name: packageFolder # the root folder containing package to be published
  type: string
- name: apiKey # the API key to use for publishing
  type: string
  default: vsts
- name: packageVersion # the version to publish the packages as. Defaults to $env:Build_Version
  type: string
  default: ''
- name: iconStorageAccessKey # an API key to use for publishing metadata to github
  type: string
  default: ''

steps:
- task: PowerShell@2
  displayName: Publish Package to Installer
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Invoke-Expression ". { $(Invoke-RestMethod https://raw.githubusercontent.com/EOS-Solutions/Scripts/master/Installer/download-gin.ps1 -Headers @{"Cache-Control" = "no-cache"}) }"
      $isDebug = $env:System_Debug -ieq 'true'
      $Version = "${{ parameters.packageVersion }}"
      $iconStorageAccessKey = '${{ parameters.iconStorageAccessKey }}'

      if (-not $Version) { $Version = $env:Build_Version }
      Write-Host "Version: $Version"

      $ginArgs = @(
        "push",
        "${{ parameters.packageFolder }}",
        "--feed", "${{ parameters.feedName }}",
        "--version", "$Version",
        "--api-key", "${{ parameters.apiKey }}",
        "--icon-key", "$iconStorageAccessKey"
      )
      ## Write-Host (ConvertTo-Json $ginArgs)
      gin.exe @ginArgs